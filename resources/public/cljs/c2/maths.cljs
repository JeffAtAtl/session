;;This file autogenerated from 
;;
;;  src/cljx/c2/maths.cljx
;;
(ns c2.maths (:use-macros [c2.macros :only [combine-with]]))
(def Pi 3.141592653589793)
(def Tau (* 2 Pi))
(def radians-per-degree (/ Pi 180))
(defn sin [x] (.sin js/Math x))
(defn cos [x] (.cos js/Math x))
(defn expt ([x] (.exp js/Math x)) ([x y] (.pow js/Math x y)))
(defn sqrt [x] (.sqrt js/Math x))
(defn sq [x] (expt x 2))
(defn abs [x] (.abs js/Math x))
(defn log [x] (.log js/Math x))
(defn log10 [x] (/ (.log js/Math x) (.-LN10 js/Math)))
(defn floor [x] (.floor js/Math x))
(defn ceil [x] (.ceil js/Math x))
(defn extent "Returns 2-vector of min and max elements in xs" [xs] [(apply min xs) (apply max xs)])
(defn add ([& args] (reduce (fn [A B] (combine-with A B clojure.core/+ add)) args)))
(defn sub ([& args] (if (= (count args) 1) (combine-with 0 (first args) clojure.core/- sub) (reduce (fn [A B] (combine-with A B clojure.core/- sub)) args))))
(defn mul ([& args] (reduce (fn [A B] (combine-with A B clojure.core/* mul)) args)))
(defn div ([& args] (if (= (count args) 1) (combine-with 1 (first args) clojure.core// div) (reduce (fn [A B] (combine-with A B clojure.core// div)) args))))