#session/session {:subsessions [#session/subsession {:type :cljs, :loops []} #session/subsession {:type :clj, :loops [#session/loop {:id "3", :output {:incremental 0, :major 1, :minor 4, :qualifier nil}, :input "*clojure-version*"} #session/loop {:id "11", :output (2 3 4 5 6), :input "(map inc [1 2 3 4 5])"} #session/loop {:id "12", :output (5 7 9), :input "(map + [1 2 3] [4 5 6])"} #session/loop {:id "15", :output (0 2 4 6 8), :input "(filter even? (range 10))\n"} #session/loop {:id "19", :output (8 6 4 2 0), :input "(reverse [0 2 4 6 8])"} #session/loop {:id "20", :output 1, :input "(:a {:a 1 :b 2})"} #session/loop {:id "21", :output 1, :input "({:a 1 :b 2} :a)"} #session/loop {:id "22", :output 1, :input "([1 2 3] 0)"} #session/loop {:id "23", :output 1, :input "(nth [1 2 3] 0)"} #session/loop {:id "24", :output [1 2 3 4], :input "(conj [1 2 3] 4)"} #session/loop {:id "26", :output (2 3), :input "(drop 1 [1 2 3])"} #session/loop {:id "25", :output (1), :input "(take 1 [1 2 3])"} #session/loop {:id "16", :output {:a 1, :b 2}, :input "(assoc {:a 1} :b 2)"} #session/loop {:id "17", :output {:a 1}, :input "(dissoc {:a 1 :b 2} :b)"} #session/loop {:id "18", :output {:a 1, :b 2, :c 3}, :input "(merge {:a 1 :b 2} {:c 3})"} #session/loop {:id "27", :output {:a 4, :b 2}, :input "(merge-with + {:a 1 :b 2} {:a 3})"} #session/loop {:id "28", :output [[:a 1] [:b 2]], :input "(into [] {:a 1 :b 2})"} #session/loop {:id "29", :output {:a 1, :b 2}, :input "(into {} [[:a 1] [:b 2]])"}]}], :id 1, :last-loop-id 29}